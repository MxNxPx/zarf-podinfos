on:
  push:
    branches:
      - main

name: release-please-workflow

jobs:
  tag-new-version:
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release-flag.outputs.release_created }}
      release_tag: ${{ steps.release-tag.outputs.release_tag }}
    steps:
      - name: Create Release Tag
        id: tag
        uses: google-github-actions/release-please-action@v4.1.1
        with:
          command: manifest # use configs in release-please-config.json
      - id: release-flag
        run: echo "release_created=${{ steps.tag.outputs.release_created || false }}" >> $GITHUB_OUTPUT 
      - id: release-tag
        run: echo "release_tag=${{ steps.tag.outputs.version || false }}" >> $GITHUB_OUTPUT 

  build-release-notes-update:
    needs: tag-new-version
    if: ${{ needs.tag-new-version.outputs.release_created == 'true'}}
    runs-on: ubuntu-latest
    outputs:
      header_info: ${{ steps.header-info.outputs.header_info }}
      deploy_info: ${{ steps.deploy-info.outputs.deploy_info }}
    steps:
      - name: Build Header Info
        id: header-info
        run: |
          # set header to markdown comment
          HEADER_INFO='[//]: # (MODIFIED BY WORKFLOW)'
          # set GH output
          echo "header_info=${HEADER_INFO}" >> $GITHUB_OUTPUT
      - name: Build Deploy Info
        id: deploy-info
        run: |
          PREFIX='---\n#### HOW TO DEPLOY\n'
          # set list of all zarf pkgs
          PKGS="zarf-package-podinfos \
                 zarf-package-another-podinfos \
                 zarf-package-yet-another-podinfos"
          # loop thru all the zarf pkgs and build regex
          for pkg in ${PKGS}; do
            DEPLOY_INFO="${DEPLOY_INFO}\`\`\`console\nzarf package deploy oci://ghcr.io/mxnxpx/packages/$pkg:${{ needs.tag-new-version.outputs.release_tag }}-amd\n\`\`\`\n"
          done
          # add the prefix
          DEPLOY_INFO="${PREFIX}${DEPLOY_INFO}"
          # set as GH output
          echo "deploy_info=${DEPLOY_INFO}" >> $GITHUB_OUTPUT

  update-release-notes:
    needs: [ tag-new-version, build-release-notes-update ]
    if: ${{ needs.tag-new-version.outputs.release_created == 'true'}}
    uses: ./.github/workflows/update-release-info-from-tag.yaml
    with:
      tag-name: ${{ needs.tag-new-version.outputs.release_tag }}
      release-body-top: ${{ needs.build-release-notes-update.outputs.header_info }}
      release-body-bottom: ${{ needs.build-release-notes-update.outputs.deploy_info }}
    secrets: inherit

  publish-release:
    needs: tag-new-version
    if: ${{ needs.tag-new-version.outputs.release_created == 'true'}}
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release Artifact
        id: echo-release
        run: echo "RELEASE ARTIFACT WILL BE CREATED AT THIS POINT"
